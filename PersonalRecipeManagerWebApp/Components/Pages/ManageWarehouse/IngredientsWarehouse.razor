@page "/managewarehouse/ingredients"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PersonalRecipeManagerWebApp.Models
@using PersonalRecipeManagerWebApp.Services
@using PersonalRecipeManagerWebApp.Data
@inject IHandleInteractionService InteractionService

<PageTitle>Ingredients Warehouse</PageTitle>

<h1>Ingredients</h1>

<RadzenDataGrid @ref="ingredientsGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" PageSize="5"
                AllowPaging="true" TItem="Ingredients" FilterMode="FilterMode.Simple" Data="@ingredients" EditMode="DataGridEditMode.Single"
                RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">

    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Ingredient" Click="@InsertRow" Disabled="@disableAdd" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Ingredients" Property="Name" Title="Name">
            <EditTemplate Context="ingredient">
                <RadzenTextBox @bind-Value="ingredient.Name" Style="width:100%; display: block" Name="Name" aria-label="Enter Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Ingredients" Property="Cost" Title="Cost">
            <EditTemplate Context="ingredient">
                <RadzenNumeric @bind-Value="ingredient.Cost" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select Cost" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Ingredients" Property="UnitOfMeasurement" Title="Unit of Measurement">
            <EditTemplate Context="ingredient">
                <RadzenTextBox @bind-Value="ingredient.UnitOfMeasurement" Style="width:100px; display: block" Name="UnitOfMeasurement" aria-label="Enter Unit Of Measurement" />
                <RadzenRequiredValidator Text="Unit Of Measurement is required" Component="UnitOfMeasurement" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="ingredient" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="ingredient">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(ingredient))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Click="@((args) => DeleteRow(ingredient))" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="ingredient">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Click="@((args) => SaveRow(ingredient))" Size="ButtonSize.Medium" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => CancelEdit(ingredient))" class="rz-my-1 rz-ms-1" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Click="@((args) => DeleteRow(ingredient))" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns> 

</RadzenDataGrid>



@code {
    RadzenDataGrid<Ingredients> ingredientsGrid;
    List<Ingredients> ingredients;

    private Ingredients currentlyEditingIngredient;

    private bool disableAdd;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ingredients = await InteractionService.RetrieveAllWarehouseIngredientsAsync();
    }

    async Task OnCreateRow(Ingredients ingredient)
    {
        disableAdd = false;

        await InteractionService.AddWarehouseIngredientsAsync(ingredient);
    }

    async Task InsertRow()
    {
        disableAdd = true;
        var ingredient = new Ingredients(Guid.NewGuid());
        await ingredientsGrid.InsertRow(ingredient);
    }
    void CancelEdit(Ingredients ingredient)
    {
        if (currentlyEditingIngredient is not null)
        {
            ingredient.Name = currentlyEditingIngredient.Name;
            ingredient.Cost = currentlyEditingIngredient.Cost;
            ingredient.UnitOfMeasurement = currentlyEditingIngredient.UnitOfMeasurement;
        }

        disableAdd = false;

        ingredientsGrid.CancelEditRow(ingredient);
    }
    async Task EditRow(Ingredients ingredient)
    {
        currentlyEditingIngredient = new(ingredient.Id, ingredient.Name, ingredient.Cost, ingredient.UnitOfMeasurement);

        disableAdd = true;

        await ingredientsGrid.EditRow(ingredient);
    }

    async Task SaveRow(Ingredients ingredient)
    {
        await ingredientsGrid.UpdateRow(ingredient);
    }

    async Task OnUpdateRow(Ingredients ingredient)
    {
        await InteractionService.UpsertWarehouseIngredientsAsync(ingredient);
    }

    async Task DeleteRow(Ingredients ingredient)
    {
        ingredients.Remove(ingredient);
        await InteractionService.RemoveWarehouseIngredientsAsync(ingredient);
        await ingredientsGrid.Reload();
    }
}
