@page "/managewarehouse/equipment"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PersonalRecipeManagerWebApp.Models
@using PersonalRecipeManagerWebApp.Data
@using PersonalRecipeManagerWebApp.Services
@inject NavigationManager NavigationManager
@inject IHandleInteractionService InteractionService
@inject DialogService DialogService

<PageTitle>Equipment Warehouse</PageTitle>

<h1>Equipment</h1>

<RadzenDataGrid @ref="equipmentGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" PageSize="5"
                AllowPaging="true" TItem="Equipment" FilterMode="FilterMode.Simple" Data="@equipment" EditMode="DataGridEditMode.Single"
                RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">

    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Equipment" Click="@InsertRow" Disabled="@disableAdd" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Equipment" Property="Name" Title="Name">
            <EditTemplate Context="equipment">
                <RadzenTextBox @bind-Value="equipment.Name" Style="width:200px; display: block" Name="Name" aria-label="Enter Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Equipment" Property="Cost" Title="Cost">
            <EditTemplate Context="equipment">
                <RadzenNumeric @bind-Value="equipment.Cost" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select Cost" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="equipment" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="equipment">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(equipment))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Click="@((args) => DeleteRow(equipment))"  Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="equipment">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Click="@((args) => SaveRow(equipment))" Size="ButtonSize.Medium" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => CancelEdit(equipment))" class="rz-my-1 rz-ms-1" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Click="@((args) => DeleteRow(equipment))" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns> 

</RadzenDataGrid>



@code {
    RadzenDataGrid<Equipment> equipmentGrid;
    List<Equipment> equipment;

    private Equipment currentlyEditingEquipment;

    private bool disableAdd;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        equipment = await InteractionService.RetrieveAllWarehouseEquipmentAsync();
    }

    async Task OnCreateRow(Equipment equipment)
    {
        disableAdd = false;
        await InteractionService.AddWarehouseEquipmentAsync(equipment);
    }

    async Task InsertRow()
    {
        disableAdd = true;
        var equipment = new Equipment(Guid.NewGuid());
        await equipmentGrid.InsertRow(equipment);
    }
    void CancelEdit(Equipment equipment)
    {
        if (currentlyEditingEquipment is not null)
        {
            equipment.Name = currentlyEditingEquipment.Name;
            equipment.Cost = currentlyEditingEquipment.Cost;
        }

        disableAdd = false;

        equipmentGrid.CancelEditRow(equipment);
    }
    async Task EditRow(Equipment equipment)
    {
        currentlyEditingEquipment = new(equipment.Id, equipment.Name, equipment.Cost);

        disableAdd = true;

        await equipmentGrid.EditRow(equipment);
    }

    async Task SaveRow(Equipment equipment)
    {
        disableAdd = false;

        await equipmentGrid.UpdateRow(equipment);
    }

    async Task OnUpdateRow(Equipment equipment)
    {
        await InteractionService.UpsertWarehouseEquipmentAsync(equipment);
    }

    async Task DeleteRow(Equipment equipments)
    {
        var result = await DialogService.Confirm("Are you sure?", "Delete Row", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (result.HasValue && result.Value)
        {
            equipment.Remove(equipments);
            await InteractionService.RemoveWarehouseEquipmentAsync(equipments);
            await equipmentGrid.Reload();
        }
    }
}

