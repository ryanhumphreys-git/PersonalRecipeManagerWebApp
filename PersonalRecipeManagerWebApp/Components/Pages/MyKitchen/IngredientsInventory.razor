@page "/mykitchen/ingredients"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PersonalRecipeManagerWebApp.Models
@using PersonalRecipeManagerWebApp.Data
@using PersonalRecipeManagerWebApp.Services
@inject IHandleInteractionService InteractionService
@inject NavigationManager NavigationManager

<PageTitle>Kitchen Ingredients Inventory</PageTitle>

<h1>Kitchen Ingredients Inventory</h1>

<RadzenDataGrid @ref="ingredientsGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" PageSize="5"
                AllowPaging="true" TItem="KitchenIngredientsDto" FilterMode="FilterMode.Simple" Data="@ingredients" EditMode="DataGridEditMode.Single"
                RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">

    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Ingredient" Click="@InsertRow" Disabled="@disableAdd" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="KitchenIngredientsDto" Property="Name" Title="Name">
            <EditTemplate Context="kitchenIngredientsDto">
                <RadzenDropDown @bind-Value="kitchenIngredientsDto.Id" Data="@allIngredients" ValueProperty="Id" TextProperty="Name" Style="width:200px; display: block" Name="Name" aria-label="Enter Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="KitchenIngredientsDto" Property="Quantity" Title="Quantity">
            <EditTemplate Context="kitchenIngredientsDto">
                <RadzenNumeric @bind-Value="kitchenIngredientsDto.Quantity" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select Quantity" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="KitchenIngredientsDto" Property="UnitOfMeasurement" Title="Unit of Measurement">
            <EditTemplate Context="kitchenIngredientsDto">
                <RadzenTextBox @bind-Value="kitchenIngredientsDto.UnitOfMeasurement" Style="width:200px; display: block" Name="UnitOfMeasurement" aria-label="Enter Unit Of Measurement" />
                <RadzenRequiredValidator Text="Unit Of Measurement is required" Component="UnitOfMeasurement" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="kitchenIngredientsDto" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="kitchenIngredientsDto">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(kitchenIngredientsDto))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="kitchenIngredientsDto">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Click="@((args) => SaveRow(kitchenIngredientsDto))" Size="ButtonSize.Medium" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => CancelEdit(kitchenIngredientsDto))" class="rz-my-1 rz-ms-1" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"  aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns> 

</RadzenDataGrid>



@code {
    private Guid kitchenId = new Guid("E7C14A98-BF68-4D93-A05E-EAD425347E9F");
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }
    RadzenDataGrid<KitchenIngredientsDto> ingredientsGrid;
    List<KitchenIngredientsDto> ingredients;
    List<Ingredients> allIngredients;
    private User user { get; set; }

    private bool disableAdd;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        user = await InteractionService.RetrieveUserInformationByIdAsync(Id);

        ingredients = await InteractionService.RetrieveKitchenIngredientsDtoByKitchenIdAsync(kitchenId);

        allIngredients = await InteractionService.RetrieveAllWarehouseIngredientsAsync();
    }

    async Task OnCreateRow(KitchenIngredientsDto ingredient)
    {
        disableAdd = false;

        KitchenIngredients newIngredient = new(Guid.NewGuid(), kitchenId, ingredient.Id, ingredient.Quantity);

        await InteractionService.AddKitchenIngredientsAsync(newIngredient);
    }

    async Task InsertRow()
    {
        disableAdd = true;
        var ingredient = new KitchenIngredientsDto();
        await ingredientsGrid.InsertRow(ingredient);
    }
    async Task CancelEdit(KitchenIngredientsDto ingredient)
    {
        var ingredientExists = await InteractionService.CheckIfKitchenHasIngredientByIdAsync(kitchenId);
        KitchenIngredients currentIngredient;
        if(ingredientExists)
        {
            currentIngredient = await InteractionService.RetrieveKitchenIngredientByIdAsync(ingredient.Id);
        }
        else
        {
            currentIngredient = new(Guid.NewGuid(), kitchenId, ingredient.Id, ingredient.Quantity);
        }

        ingredientsGrid.CancelEditRow(ingredient);
    }

    async Task EditRow(KitchenIngredientsDto ingredient)
    {
        await ingredientsGrid.EditRow(ingredient);
    }

    async Task SaveRow(KitchenIngredientsDto ingredient)
    {
        await ingredientsGrid.UpdateRow(ingredient);
    }

    async Task OnUpdateRow(KitchenIngredientsDto ingredient)
    {
        KitchenIngredients currentIngredient = new(Guid.NewGuid(), kitchenId, ingredient.Id, ingredient.Quantity);
        await InteractionService.UpsertKitchenIngredientsAsync(currentIngredient);
    }
}
