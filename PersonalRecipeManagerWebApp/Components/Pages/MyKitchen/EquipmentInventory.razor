@page "/mykitchen/equipment"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PersonalRecipeManagerWebApp.Models
@using PersonalRecipeManagerWebApp.Services
@using PersonalRecipeManagerWebApp.Data
@inject NavigationManager NavigationManager
@inject IHandleInteractionService InteractionService

<PageTitle>Equipment Inventory</PageTitle>

<h1>Equipment</h1>

<RadzenDataGrid @ref="equipmentGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" PageSize="5"
                AllowPaging="true" TItem="EquipmentDto" FilterMode="FilterMode.Simple" Data="@equipment" EditMode="DataGridEditMode.Single"
                RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">

    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add Additional Equipment" Click="@InsertRow" Disabled="@disableAdd" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="EquipmentDto" Property="Name" Title="Name">
            <EditTemplate Context="kitchenEquipmentDto">
                <RadzenDropDown @bind-Value="kitchenEquipmentDto.Name" Data="@allEquipment" ValueProperty="Name" TextProperty="Name" Style="width:200px; display: block" Name="Name" aria-label="Enter Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="EquipmentDto" Property="Quantity" Title="Quantity">
            <EditTemplate Context="kitchenEquipmentDto">
                <RadzenNumeric @bind-Value="kitchenEquipmentDto.Quantity" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select Quantity" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="kitchenEquipmentDto" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="kitchenEquipmentDto">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(kitchenEquipmentDto))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="kitchenEquipmentDto">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Click="@((args) => SaveRow(kitchenEquipmentDto))" Size="ButtonSize.Medium" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => CancelEdit(kitchenEquipmentDto))" class="rz-my-1 rz-ms-1" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"  aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns> 

</RadzenDataGrid>



@code {
    private Guid kitchenId = new Guid("E7C14A98-BF68-4D93-A05E-EAD425347E9F");
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }
    RadzenDataGrid<EquipmentDto> equipmentGrid;
    List<EquipmentDto> equipment;
    List<Equipment> allEquipment;
    private User user { get; set; }

    private bool disableAdd;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        user = await InteractionService.RetrieveUserInformationByIdAsync(Id);

        equipment = await InteractionService.RetrieveKitchenEquipmentDtoByKitchenIdAsync(kitchenId);

        allEquipment = await InteractionService.RetrieveAllWarehouseEquipmentAsync();
    }

    async Task OnCreateRow(EquipmentDto equipment)
    {
        disableAdd = false;

        KitchenEquipment newEquipment = new(Guid.NewGuid(), kitchenId, equipment.Id, equipment.Quantity);

        await InteractionService.AddKitchenEquipmentAsync(newEquipment);
    }

    async Task InsertRow()
    {
        disableAdd = true;
        var equipment = new EquipmentDto();
        await equipmentGrid.InsertRow(equipment);
    }

    async Task CancelEdit(EquipmentDto equipment)
    {
        var equipmentExists = await InteractionService.CheckIfKitchenHasEquipmentByIdAsync(equipment.Id);
        KitchenEquipment currentEquipment;
        if(equipmentExists)
        {
            currentEquipment = await InteractionService.RetrieveKitchenEquipmentByIdAsync(equipment.Id);
        }
        else
        {
            currentEquipment = new(Guid.NewGuid(), kitchenId, equipment.Id, equipment.Quantity);
        }

        equipmentGrid.CancelEditRow(equipment);
    }

    async Task EditRow(EquipmentDto equipment)
    {
        await equipmentGrid.EditRow(equipment);
    }

    async Task SaveRow(EquipmentDto equipment)
    {
        await equipmentGrid.UpdateRow(equipment);
    }

    async Task OnUpdateRow(EquipmentDto equipment)
    {
        KitchenEquipment currentEquipment = new(Guid.NewGuid(), kitchenId, equipment.Id, equipment.Quantity);

        await InteractionService.UpsertKitchenEquipmentAsync(currentEquipment);
        
    }
}

